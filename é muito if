#include <stdio.h>

#include <stdlib.h>

#include <time.h>

#include<windows.h>

#include<conio.h>
void come(char **mapa,int x, int y);

void cria_fase_2(char **mapa, int x,int y,int xz,int yz, int xc, int yc);
void cria_fase_1(char **mapa, int x,int y,int xz,int yz, int xc, int yc);
void libera_espaco(char **mapa,int dimensao);

char** desenha_mapa(int dimensao);
char** desenha_mapas(int dimensao, char **mapa, int u1, int u2);
void imprime_mapa(int dim,char **mapa);

void jogador();

//int inteliencia(int x, int y, int xz, int yz, char **mapa);



int main(void){
int u, u1=0,u2=0;
        srand(time(NULL));

        char tecla;

int x;

int y;

int xz;

int yz;

int xc;

int yc;

int o=0;

	x = rand() % 20;

y = rand() % 20;

xz = rand() % 20;

yz = rand() % 20;

xc = rand() % 20;

yc = rand() % 20;

	int dimensao = 20;

    char **m;

	system("PAUSE");
// m = desenha_mapa(dimensao);
	//cria_fase_2(m, x, y, xz, yz, xc, yc);
	while(o==0){
            if(u==0){desenha_mapas(dimensao,m, u1, u2);}
            else{
        m = desenha_mapa(dimensao);}
u = 0;	                                                                         //"tire as / para escolher a fas
	cria_fase_2(m, x, y, xz, yz, xc, yc);
	//cria_fase_1(m, x, y, xz, yz, xc, yc);

	imprime_mapa(dimensao,m);

	Sleep(100);

	//aqui

	if(kbhit()){

        tecla = getch();

	}

	if(tecla=='w'){

	    if(m[x-1][y]!=(char)254){
                come(m,x,y);
        x--;

	    }

	}

		if(tecla=='s'){

	    if(m[x+1][y]!=(char)254){
come(m,x,y);
        x++;

	    }

	}

		if(tecla=='a'){
come(m,x,y);
	    if(m[x][y-1]!=(char)254){

        y--;

	    }

	}

		if(tecla=='d'){
come(m,x,y);
	    if(m[x][y+1]!=(char)254){

        y++;

	    }

	}

	//

	if(xz==xc&&yz==yc){

            if(m[xz+1][yz]!=(char)254){
           if(m[xz+1][yz]==' '){u1=1;}
           if(m[xz+1][yz]=='.'){u1=2;}
        xz++;}else{

        if(m[xc-1][yc]!=(char)254){
           if(m[xc-1][yc]==' '){u2=1;}
           if(m[xc-1][yc]=='.'){u2=2;}
        xc--;}else{

        if(m[xc][yc+1]!=(char)254){
           if(m[xc][yc+1]==' '){u2=1;}
           if(m[xc][yc+1]=='.'){u2=2;}
        yc++;}else{

        if(m[xz][yz-1]!=(char)254){
           if(m[xz][yz-1]==' '){u1=1;}
           if(m[xz][yz-1]=='.'){u1=2;}
        yz--;}

        }

        }

        }

	}

	if(x>xz){

            if(m[xz+1][yz]==(char)254){

                if(m[xz][yz+1]==' '||m[xz][yz+1]=='.'){
                   if(m[xz][yz+1]==' '){u1=1;}
                   if(m[xz][yz+1]=='.'){u1=2;}
                 yz++;

                }else{

                if(m[xz][yz-1]==' '||m[xz][yz-1]=='.'){
                   if(m[xz][yz-1]==' '){u1=1;}
                   if(m[xz][yz-1]=='.'){u1=2;}
                  yz--;

                }}

            }else{
                   if(m[xz+1][yz]==' '){u1=1;}
                   if(m[xz+1][yz]=='.'){u1=2;}
    xz++;}



}else{

if(y>yz){

            if(m[xz][yz+1]==(char)254){

                if(m[xz+1][yz]==' '||m[xz+1][yz]=='.'){
                   if(m[xz+1][yz]==' '){u1=1;}
                   if(m[xz+1][yz]=='.'){u1=2;}
                    xz++;

                }else{

                if(m[xz-1][yz]==' '||m[xz-1][yz]=='.'){
                   if(m[xz-1][yz]==' '){u1=1;}
                   if(m[xz-1][yz]=='.'){u1=2;}
                    xz--;

                }}



            }else{
                   if(m[xz][yz+1]==' '){u1=1;}
                   if(m[xz][yz+1]=='.'){u1=2;}
    yz++;}



}else{

if(x<xz){

                    if(m[xz-1][yz]==(char)254){

                if(m[xz][yz+1]==' '||m[xz][yz+1]=='.'){
                   if(m[xz][yz+1]==' '){u1=1;}
                   if(m[xz][yz+1]=='.'){u1=2;}
                    yz++;

                }else{

                if(m[xz][yz-1]==' '||m[xz][yz-1]=='.'){
                   if(m[xz][yz-1]==' '){u1=1;}
                   if(m[xz][yz-1]=='.'){u1=2;}
                    yz--;

                }}



            }else{
                   if(m[xz-1][yz]==' '){u1=1;}
                   if(m[xz-1][yz]=='.'){u1=2;}
    xz--;}



}else{

if(y<yz){

                        if(m[xz][yz-1]==(char)254){

                if(m[xz+1][yz]==' '||m[xz+1][yz]=='.'){
                   if(m[xz+1][yz]==' '){u1=1;}
                   if(m[xz+1][yz]=='.'){u1=2;}
                    xz++;

                }else{

                if(m[xz-1][yz]==' '||m[xz-1][yz]=='.'){
                   if(m[xz-1][yz]==' '){u1=1;}
                   if(m[xz-1][yz]=='.'){u1=2;}
                    xz--;

                }}



            }else{
                   if(m[xz][yz-1]==' '){u1=1;}
                   if(m[xz][yz-1]=='.'){u1=2;}
    yz--;}

}

if(x==xz && y==yz){
    libera_espaco(m,dimensao);
    return(0);

}

}

}

}



	if(x>xc){

            if(m[xc+1][yc]==(char)254){

                if(m[xc][yc+1]==' '||m[xc][yc+1]=='.'){
                   if(m[xc][yc+1]==' '){u2=1;}
                   if(m[xc][yc+1]=='.'){u2=2;}
                 yc++;

                }else{

                if(m[xc][yc-1]==' '||m[xc][yc-1]=='.'){
                   if(m[xc][yc-1]==' '){u2=1;}
                   if(m[xc][yc-1]=='.'){u2=2;}
                  yc--;

                }}

            }else{
                   if(m[xc+1][yc]==' '){u2=1;}
                   if(m[xc+1][yc]=='.'){u2=2;}
    xc++;}



}else{

if(y>yc){

            if(m[xc][yc+1]==(char)254){

                if(m[xc+1][yc]==' '||m[xc+1][yc]=='.'){
                   if(m[xc+1][yc]==' '){u2=1;}
                   if(m[xc+1][yc]=='.'){u2=2;}
                    xc++;

                }else{

                if(m[xc-1][yc]==' '||m[xc-1][yc]=='.'){
                   if(m[xc-1][yc]==' '){u2=1;}
                   if(m[xc-1][yc]=='.'){u2=2;}
                    xc--;

                }}



            }else{
                   if(m[xc][yc+1]==' '){u2=1;}
                   if(m[xc][yc+1]=='.'){u2=2;}
    yc++;}



}else{

if(x<xc){

                    if(m[xc-1][yc]==(char)254){

                if(m[xc][yc+1]==' '||m[xc][yc+1]=='.'){
                   if(m[xc][yc+1]==' '){u2=1;}
                   if(m[xc][yc+1]=='.'){u2=2;}
                    yc++;

                }else{

                if(m[xc][yc-1]==' '||m[xc][yc-1]=='.'){
                   if(m[xc][yc-1]==' '){u2=1;}
                   if(m[xc][yc-1]=='.'){u2=2;}
                    yc--;

                }}



            }else{
                   if(m[xc-1][yc]==' '){u2=1;}
                   if(m[xc-1][yc]=='.'){u2=2;}
    xc--;}



}else{

if(y<yc){

                        if(m[xc][yc-1]==(char)254){

                if(m[xc+1][yc]==' '||m[xc+1][yc]=='.'){
                   if(m[xc+1][yc]==' '){u2=1;}
                   if(m[xc+1][yc]=='.'){u2=2;}
                    xc++;

                }else{

                if(m[xc-1][yc]==' '||m[xc-1][yc]=='.'){
                   if(m[xc-1][yc]==' '){u2=1;}
                   if(m[xc-1][yc]=='.'){u2=2;}
                    xc--;

                }}



            }else{
                   if(m[xc][yc-1]==' '){u2=1;}
                   if(m[xc][yc-1]=='.'){u2=2;}
    yc--;}

}

if(x==xc && y==yc){
    libera_espaco(m,dimensao);
    return(0);

}

}

}

}

	//inteligencia(x, y, xz, yz, m);

	//aqui

	system("cls");

	imprime_mapa(dimensao,m);

	system("cls");

	}
	return 0;

}



//FUNÇÃO QUE CONSTROI O MAPA

//essa função precisa de parametro uma variavel fixa int dimensao = 20;

char** desenha_mapa(int dim){



	int i,x;
	char **mapa;


	mapa = (char**)malloc(dim*sizeof(char*));//alocando uma dimensao do mapa

		for(x=0;x<dim;x++){

			mapa[x] = (char*)malloc(dim*sizeof(char));//fazendo a segunda alocação do mapa

			for(i=0;i<dim;i++){

				//condição que verifica e faz a construção do mapa

				if(i==0 || i==(dim-1) || x==0 || x==(dim-1)){

					mapa[x][i] = 254;

				}else{
                    if(mapa[x][i]==' '){mapa[x][i] = ' ';}
                    else{
					mapa[x][i] = '.';}

				}

		   }

		}

	return mapa;

}

char** desenha_mapas(int dim, char **mapa, int u1, int u2){



	int i,x;

		for(x=0;x<dim;x++){


			for(i=0;i<dim;i++){

				//condição que verifica e faz a construção do mapa

				if(i==0 || i==(dim-1) || x==0 || x==(dim-1)){

					mapa[x][i] = 254;

				}else{
                    if(mapa[x][i]==' '){mapa[x][i] = ' ';}else{
                    if(mapa[x][i]=='j'){if(u1==1){mapa[x][i]=' ';}if(u1==2){mapa[x][i]='.';}}
                    if(mapa[x][i]=='v'){if(u2==1){mapa[x][i]=' ';}if(u2==2){mapa[x][i]='.';}}
				}

		   }

		}

}
}

//FIM DA FUNÇÃO QUE CRIA O MAPA

void imprime_mapa(int dim,char **mapa){

	int i,j;

	for(i=0;i<dim;i++){

		printf("\n");

		for(j=0;j<dim;j++){

			printf("%c ",mapa[i][j]);

		}

	}

}



//==============================

//FUNÇÃO QUE DESENHA AS PAREDES NO MAPA

void cria_fase_2(char **mapa, int x, int y, int xz, int yz, int xc, int yc){

	//criando as paredes bloco superior esquerdo

	system("color 4f");

	mapa[10][9] = 254;

    mapa[10][10] = 254;

    mapa[11][9] =  254;

    mapa[11][10] = 254;

    mapa[12][9] = 254;

	//criando as paredes bloco superior esquerdo

	mapa[2][6] = 254;

	mapa[2][7] = 254;

	mapa[3][6] = 254;

	mapa[3][7] = 254;

	mapa[4][6] = 254;

	mapa[4][7] = 254;

	mapa[5][6] = 254;

	mapa[5][7] = 254;



    mapa[2][2] = 254;

    mapa[2][3] = 254;

	mapa[2][4] = 254;

	mapa[3][2] = 254;

	mapa[3][3] = ' ';

	mapa[3][4] = 254;

	mapa[4][2] = 254;

	mapa[4][3] = ' ';

	mapa[4][4] = 254;

	mapa[5][2] = 254;

	mapa[5][3] = 254;

	mapa[5][4] = 254;

	//==============fim

	//criando parede na parte superior direita

	mapa[2][12] = 254;

	mapa[3][12] = 254;

	mapa[4][12] = 254;

	mapa[5][12] = 254;

	mapa[2][13] = 254;

	mapa[3][13] = 254;

	mapa[4][13] = 254;

	mapa[5][13] = 254;

	//==============fim

	//superior direito 2

	mapa[2][15] = 254;

	mapa[2][16] = 254;

	mapa[2][17] = 254;

	mapa[3][15] = 254;

	mapa[3][16] = ' ';

	mapa[3][17] = 254;

	mapa[4][15] = 254;

	mapa[4][16] = ' ';

	mapa[4][17] = 254;

	mapa[5][15] = 254;

	mapa[5][16] = 254;

	mapa[5][17] = 254;

	//==============fim

	//superior central beira

	mapa[1][9] = 254;

	mapa[2][9] = 254;

	mapa[3][9] = 254;

	mapa[4][9] = 254;

	mapa[5][9] = 254;

	mapa[1][10] = 254;

	mapa[2][10] = 254;

	mapa[3][10] = 254;

	mapa[4][10] = 254;

	mapa[5][10] = 254;

	//==============fim

	//direita central

	mapa[7][1] = 254;

	mapa[7][2] = 254;

	mapa[7][3] = 254;

	mapa[8][1] = 254;

	mapa[9][3] = 254;

	mapa[10][2] = 254;

	mapa[10][3] = 254;

	mapa[11][3] = 254;

	mapa[12][1] = 254;

	mapa[13][1] = 254;

	mapa[13][2] = 254;

	mapa[13][3] = 254;

	//==============fim

	//bolocos unitários

	mapa[12][7] = 254;

	mapa[12][12] = 254;

	//==============fim

	//esquerdo central

	mapa[7][16] = 254;

	mapa[7][17] = 254;

	mapa[7][18] = 254;

	mapa[8][18] = 254;

	mapa[9][16] = 254;

	mapa[10][16] = 254;

	mapa[10][17] = 254;

	mapa[11][16] = 254;

	mapa[12][18] = 254;

	mapa[13][18] = 254;

	mapa[13][17] = 254;

	mapa[13][16] = 254;

	//===============fim

	//central esquerdo

	mapa[7][5] = 254;

	mapa[8][5] = 254;

	mapa[9][5] = 254;

	mapa[10][5] = 254;

	mapa[11][5] = 254;

	mapa[12][5] = 254;

	mapa[9][6] = 254;

	mapa[9][7] = 254;

	mapa[10][6] = 254;

	mapa[10][7] = 254;

	//===============fim

	//central direito

	mapa[7][14] = 254;

	mapa[8][14] = 254;

	mapa[9][14] = 254;

	mapa[10][14] = 254;

	mapa[11][14] = 254;

	mapa[12][14] = 254;

	mapa[9][13] = 254;

	mapa[9][12] = 254;

	mapa[10][13] = 254;

	mapa[10][12] = 254;

	//===============fim

	//superior central

	mapa[7][7] = 254;

	mapa[7][8] = 254;

	mapa[7][9] = 254;

	mapa[7][10] = 254;

	mapa[7][11] = 254;

	mapa[7][12] = 254;

	mapa[8][9] = 254;

	mapa[8][10] = 254;

	mapa[9][9] = 254;

	mapa[9][10] = 254;

	//==============fim

	//inferior esquerdo

	mapa[15][2] = 254;

	mapa[15][3] = 254;

	mapa[15][4] = 254;

	mapa[16][2] = 254;

	mapa[16][3] = ' ';

	mapa[16][4] = ' ';

	mapa[17][2] = 254;

	mapa[17][3] = 254;

	mapa[17][4] = 254;

	mapa[14][5] = 254;

	mapa[15][5] = 254;

	mapa[16][5] = 254;

	mapa[17][5] = 254;

	//==============fim

	//inferior direito

	mapa[15][15] = 254;

	mapa[15][16] = 254;

	mapa[15][17] = 254;

	mapa[16][15] = ' ';

	mapa[16][16] = ' ';

	mapa[16][17] = 254;

	mapa[17][15] = 254;

	mapa[17][16] = 254;

	mapa[17][17] = 254;

	mapa[14][19] = 254;

	mapa[14][10] = 254;

	mapa[14][14] = 254;



	mapa[15][9] = 254;

	mapa[15][10] = 254;

	mapa[15][14] = 254;

	mapa[16][14] = 254;

	mapa[17][14] = 254;

	//===============fim

	//superior esquerdo 3

	mapa[16][7] = 254;

	mapa[17][7] = 254;

	//===============fim

	//superior direito 3

	mapa[16][12] = 254;

	mapa[17][12] = 254;

	//===============fim

	//inferior central beira

	mapa[16][9] = 254;

	mapa[17][9] = 254;

	mapa[18][9] = 254;

	mapa[16][10] = 254;

	mapa[17][10] = 254;

	mapa[18][10] = 254;

	//================fim

		mapa[x][y] = 'k';

	mapa[xz][yz] = 'j';

	mapa[xc][yc] = 'v';

}


void cria_fase_1(char **mapa, int x, int y, int xz, int yz, int xc, int yc){

    //MAPA VERDE E BRANCO

    system("color 2f");

    mapa[2][2] = 254;

    mapa[2][3] = 254;

    mapa[3][2] = 254;

    mapa[3][3] = 254;

    mapa[4][2] = 254;

    mapa[4][3] = 254;

    mapa[5][2] = 254;

    mapa[5][3] = 254;

    //===============

    mapa[2][5] = 254;

    mapa[2][6] = 254;

    mapa[3][5] = 254;

    mapa[3][6] = 254;

    mapa[4][5] = 254;

    mapa[4][6] = 254;

    mapa[5][5] = 254;

    mapa[5][6] = 254;

    //===============

    mapa[2][8] = 254;

    mapa[2][9] = 254;

    mapa[3][8] = 254;

    mapa[3][9] = 254;

    mapa[4][8] = 254;

    mapa[4][9] = 254;

    mapa[5][8] = 254;

    mapa[5][9] = 254;

    //===============

    mapa[2][11] = 254;

    mapa[2][12] = 254;

    mapa[3][11] = 254;

    mapa[3][12] = 254;

    mapa[4][11] = 254;

    mapa[4][12] = 254;

    mapa[5][11] = 254;

    mapa[5][12] = 254;

    //================

    mapa[2][14] = 254;

    mapa[2][15] = 254;

    mapa[3][14] = 254;

    mapa[3][15] = 254;

    mapa[4][14] = 254;

    mapa[4][15] = 254;

    mapa[5][14] = 254;

    mapa[5][15] = 254;

    //================

    mapa[2][17] = 254;

    mapa[2][17] = 254;

    mapa[3][17] = 254;

    mapa[3][17] = 254;

    mapa[4][17] = 254;

    mapa[4][17] = 254;

    mapa[5][17] = 254;

    mapa[5][17] = 254;

    //================

    mapa[7][17] = 254;

    mapa[7][16] = 254;

    mapa[7][15] = 254;

    mapa[7][14] = 254;

    mapa[7][13] = 254;

    mapa[7][12] = 254;

    mapa[7][11] = 254;

    //mapa[7][10] = 254;

    mapa[7][9] = 254;

    mapa[7][8] = 254;

    mapa[7][7] = 254;

    mapa[7][6] = 254;

    mapa[7][5] = 254;

    mapa[7][4] = 254;

    mapa[7][3] = 254;

    mapa[7][2] = 254;

    //===============

    //mapa[9][10] = 254;

    mapa[9][11] = 254;

    mapa[9][12] = 254;

    mapa[9][13] = 254;

    mapa[9][14] = 254;

    mapa[9][15] = 254;

    mapa[9][16] = 254;

    mapa[9][17] = 254;

    //================

    //mapa[10][10] = 254;

    mapa[10][11] = 254;

    mapa[10][12] = 254;

    mapa[10][13] = 254;

    mapa[10][14] = 254;

    mapa[10][15] = 254;

    mapa[10][16] = 254;

    mapa[10][17] = 254;

    //=================

    mapa[9][2] = 254;

    mapa[9][3] = 254;

    mapa[9][4] = 254;

    mapa[9][5] = 254;

    mapa[9][6] = 254;

    mapa[9][7] = 254;

    mapa[9][8] = 254;

    mapa[9][9] = 254;

    //===============

    mapa[10][2] = 254;

    mapa[10][3] = 254;

    mapa[10][4] = 254;

    mapa[10][5] = 254;

    mapa[10][6] = 254;

    mapa[10][7] = 254;

    mapa[10][8] = 254;

    mapa[10][9] = 254;

    //================

    mapa[12][2] = 254;

    mapa[13][2] = 254;

    mapa[14][2] = 254;

    mapa[15][2] = 254;

    mapa[12][3] = 254;

    mapa[13][3] = 254;

    mapa[14][3] = 254;

    mapa[15][3] = 254;

    //================

    mapa[12][5] = 254;

    mapa[13][5] = 254;

    mapa[14][5] = 254;

    mapa[15][5] = 254;

    mapa[12][6] = 254;

    mapa[13][6] = 254;

    mapa[14][6] = 254;

    mapa[15][6] = 254;

    //================

    mapa[12][8] = 254;

    mapa[13][8] = 254;

    mapa[14][8] = 254;

    mapa[15][8] = 254;

    mapa[12][9] = 254;

    mapa[13][9] = 254;

    mapa[14][9] = 254;

    mapa[15][9] = 254;

    //================

    mapa[12][11] = 254;

    mapa[13][11] = 254;

    mapa[14][11] = 254;

    mapa[15][11] = 254;

    mapa[12][12] = 254;

    mapa[13][12] = 254;

    mapa[14][12] = 254;

    mapa[15][12] = 254;

    //=================

    mapa[12][14] = 254;

    mapa[13][14] = 254;

    mapa[14][14] = 254;

    mapa[15][14] = 254;

    mapa[12][15] = 254;

    mapa[13][15] = 254;

    mapa[14][15] = 254;

    mapa[15][15] = 254;

    //=================

    mapa[12][17] = 254;

    mapa[13][17] = 254;

    mapa[14][17] = 254;

    mapa[15][17] = 254;

    mapa[12][17] = 254;

    mapa[13][17] = 254;

    mapa[14][17] = 254;

    mapa[15][17] = 254;

    //=================

    mapa[17][2] = 254;

    mapa[17][3] = 254;

    mapa[17][4] = 254;

    mapa[17][5] = 254;

    mapa[17][6] = 254;

    mapa[17][7] = 254;

    mapa[17][8] = 254;

    mapa[17][9] = 254;

    mapa[17][10] = 254;

    mapa[17][11] = 254;

    mapa[17][12] = 254;

    mapa[17][13] = 254;

    mapa[17][14] = 254;

    mapa[17][15] = 254;

    mapa[17][16] = 254;

    mapa[17][17] = 254;

    //=================
		mapa[x][y] = 'k';

	mapa[xz][yz] = 'j';

	mapa[xc][yc] = 'v';


}

void cria_fase_boss(char **mapa){



}

void win(int pontos){



	printf("...................................................\n");

	printf("..........................*........................\n");

	printf("............=...==....=...=...==...=...............\n");

	printf("............=..=..=...=...=...=.=..=...............\n");

	printf("............=.=....=..=...=...=..=.=...............\n");

	printf("............==......==....=...=...==...............\n");

	printf("...................................................\n");



	printf("PONTUACAO: %D\n",pontos);

}
void libera_espaco(char **mapa,int dim){
    int x;

		for(x=0;x<dim;x++){

			free(mapa[x]);

		}

		free(mapa);

}
void come(char **mapa,int x, int y){
 mapa[x][y] = ' ';
}


/*int inteligencia(int x,int y,int xz,int yz, char **mapa){

if(x>xz){

            if(mapa[xz+1][yz]==(char)254){

                if(mapa[xz][yz+1]==' '||mapa[xz][yz+1]=='.'){

                 yz++;return(0);

                }else{

                if(mapa[xz][yz-1]==' '||mapa[xz][yz-1]=='.'){

                  yz--;return(0);

                }}

            }else{

    xz++;return(0);}



}else{

if(y>yz){

            if(mapa[xz][yz+1]==(char)254){

                if(mapa[xz+1][yz]==' '||mapa[xz+1][yz]=='.'){

                    xz++;return(0);

                }else{

                if(mapa[xz-1][yz]==' '||mapa[xz-1][yz]=='.'){

                    xz--;return(0);

                }}



            }else{

    yz++;return(0);}



}else{

if(x<xz){

                    if(mapa[xz-1][yz]==(char)254){

                if(mapa[xz][yz+1]==' '||mapa[xz][yz+1]=='.'){

                    yz++;return(0);

                }else{

                if(mapa[xz][yz-1]==' '||mapa[xz][yz-1]=='.'){

                    yz--;return(0);

                }}



            }else{

    xz--;return(0);}



}else{

if(y<yz){

                        if(mapa[xz][yz-1]==(char)254){

                if(mapa[xz+1][yz]==' '||mapa[xz+1][yz]=='.'){

                    xz++;return(0);

                }else{

                if(mapa[xz-1][yz]==' '||mapa[xz-1][yz]=='.'){

                    xz--;return(0);

                }}



            }else{

    yz--;return(0);}

}

if(x==xz && y==yz){

    return(1);

}

}

}

}

}

*/
